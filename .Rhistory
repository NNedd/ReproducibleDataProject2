testLabels <- read.table("test/Y_test.txt")
testSubjectLabels <- read.table("test/subject_test.txt", colClasses = "character")
allSet <- bind_rows(trainSet, testSet)
allLabels <- bind_rows(trainLabels, testLabels)
allSubjects <- bind_rows(trainSubjectLabels, testSubjectLabels)
allData <- bind_cols(allLabels, allSubjects, allSet)
columnLabels <- read.table("features.txt", stringsAsFactors = FALSE)
colnames(allData)[1] <- "Activity"
colnames(allData)[2] <- "Subject"
colnames(allData)[3:563] <- columnLabels$V2
#Part 2
meanLabels <- select_vars(names(allData), contains("mean()"))
stdLabels <- select_vars(names(allData), contains("std()"))
params <- c("Activity","Subject", names(meanLabels), names(stdLabels))
i <- match(params, names(allData))
newData <- allData[,i]
#Part 4
names(newData) <- sub("Acc","Acceleration",names(newData))
names(newData) <- sub("Gyro","Gyroscope",names(newData))
names(newData) <- gsub("-","",names(newData))
names(newData) <- sub("\\()","",names(newData))
tolower(names(newData))
trainSet <- read.table("train/X_train.txt")
trainLabels <- read.table("train/Y_train.txt", colClasses = "character")
trainSubjectLabels <- read.table("train/subject_train.txt")
testSet <- read.table("test/X_test.txt")
testLabels <- read.table("test/Y_test.txt", colClasses = "character")
testSubjectLabels <- read.table("test/subject_test.txt")
allSet <- bind_rows(trainSet, testSet)
allLabels <- bind_rows(trainLabels, testLabels)
allSubjects <- bind_rows(trainSubjectLabels, testSubjectLabels)
allData <- bind_cols(allLabels, allSubjects, allSet)
columnLabels <- read.table("features.txt", stringsAsFactors = FALSE)
colnames(allData)[1] <- "Activity"
colnames(allData)[2] <- "Subject"
colnames(allData)[3:563] <- columnLabels$V2
#Part 2
meanLabels <- select_vars(names(allData), contains("mean()"))
stdLabels <- select_vars(names(allData), contains("std()"))
params <- c("Activity","Subject", names(meanLabels), names(stdLabels))
i <- match(params, names(allData))
newData <- allData[,i]
#Part 4
names(newData) <- sub("Acc","Acceleration",names(newData))
names(newData) <- sub("Gyro","Gyroscope",names(newData))
names(newData) <- gsub("-","",names(newData))
names(newData) <- sub("\\()","",names(newData))
tolower(names(newData))
names(newData) <- tolower(names(newData))
View(newData)
finalData <- newData
?replace
?select_vars
?filter
activityLabels <- read.table("activity_labels.txt")
activityLabels <- read.table("activity_labels.txt")
activityLabels
for (k in 1:10299){
temp = finalData[k,1]
temp2 <- filter(activityLabels, V1 == temp)
finalData[k,1] <- temp[1,2]
}
for (k in 1:10299){
temp <-finalData[k,1]
temp2 <- filter(activityLabels, V1 == temp)
finalData[k,1] <- temp[1,2]
}
temp <- finalData[1,1]
finalData[1,1]
?match
View(finalData)
finalData[ , lapply(.SD,function(x) activityLabels$V2[chmatch(x,activityLabels$V1)])]
finalData[ , lapply(,function(x) activityLabels$V2[chmatch(x,activityLabels$V1)])]
finalData[x , lapply(,function(x) activityLabels$V2[chmatch(x,activityLabels$V1)])]
finalData[[1,1]]
for (k in 1:10299){
temp <-finalData[[k,1]]
temp2 <- filter(activityLabels, V1 == temp)
finalData[[k,1]] <- temp2[[1,2]]
}
View(finalData)
View(temp2)
View(temp2)
View(temp2)
View(temp2)
temp <- finalData[[1,1]]
temp
tem2 < - filter(activityLabels, V1==temp)
temp2 <- filter(activityLabels, V1==temp)
temp2
finalData[[1,1]] <- temp2[[1,2]]
finalData[1,1]
finalData[[1,1]]
temp <- finalData[[1,1]]
temp
temp2 <- filter(finalData, V1==temp)
temp2 <- filter(activityLabels, V1==temp)
finalData[[1,1]] <- temp2[[1,2]]
finalData[[1,1]]
temp2[[1,2]]
temp3 <- temp2[[1,2]]
temp3
activityLabels <- read.table("activity_labels.txt", colClasses = "character")
for (k in 1:10299){
temp <-finalData[[k,1]]
temp2 <- filter(activityLabels, V1 == temp)
finalData[[k,1]] <- temp2[[1,2]]
}
View(finalData)
?group_by
by_activity_subject <- group_by(finalData, activity, subject)
View(by_activity_subject)
by_activity <- summarise(by_activity_subject, n=mean())
?summarise
?summarise_each
by_summary <- summarise_each(by_activity_subject, funs(mean))
View(by_summary)
trainSet <- read.table("train/X_train.txt")
trainLabels <- read.table("train/Y_train.txt", colClasses = "character")
trainSubjectLabels <- read.table("train/subject_train.txt")
testSet <- read.table("test/X_test.txt")
testLabels <- read.table("test/Y_test.txt", colClasses = "character")
testSubjectLabels <- read.table("test/subject_test.txt")
allSet <- bind_rows(trainSet, testSet)
allLabels <- bind_rows(trainLabels, testLabels)
allSubjects <- bind_rows(trainSubjectLabels, testSubjectLabels)
allData <- bind_cols(allLabels, allSubjects, allSet)
columnLabels <- read.table("features.txt", stringsAsFactors = FALSE)
colnames(allData)[1] <- "Activity"
colnames(allData)[2] <- "Subject"
colnames(allData)[3:563] <- columnLabels$V2
#Part 2
meanLabels <- select_vars(names(allData), contains("mean()"))
stdLabels <- select_vars(names(allData), contains("std()"))
params <- c("Activity","Subject", names(meanLabels), names(stdLabels))
i <- match(params, names(allData))
newData <- allData[,i]
#Part 3
activityLabels <- read.table("activity_labels.txt", colClasses = "character")
for (k in 1:10299){
temp <-newData[[k,1]]
temp2 <- filter(activityLabels, V1 == temp)
newData[[k,1]] <- temp2[[1,2]]
}
#Part 4
names(newData) <- sub("Acc","Acceleration",names(newData))
names(newData) <- sub("Gyro","Gyroscope",names(newData))
names(newData) <- gsub("-","",names(newData))
names(newData) <- sub("\\()","",names(newData))
names(newData) <- tolower(names(newData))
for (k in 1:10299){
toString(newData[k,1])
}
#Part 5
groupedData <- group_by(newData, activity, subject)
tidyData <- summarise_each(groupedData, funs(mean))
#Writing the text file
write.table(tidyData, "tidyDataAssignment.txt", row.names=FALSE)
str(tidyData)
View(str(tidyData))
print summary(tidyData)
summary(tidyData)
names(tidyData)
View(tidyData)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","week3a.csv")
week3aData <- read.csv("week3a.csv")
head(week3aData)
agricultureLogical <- with(week3aData, ACR == 3 & AGS == 6)
which(agricultureLogical)
package("jpeg")
install.packages("jpeg")
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "pic.jpg", native=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "pic.jpg")
week3pic <- readJPEG("pic.jpg", native=TRUE)
quantile(week3pic, c(.30,.80))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "pic.jpg",mode="wb")
week3pic <- readJPEG("pic.jpg", native=TRUE)
quantile(week3pic, c(.30,.80))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "gdp.csv")
download.file("
https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "edu.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "edu.csv")
gdpdata <- read.csv("gdp.csv")
edudata <- read.csv("edu.csv")
head(gdpdata)
gdpdata <- read.csv("gdp.csv", skip=5)
head(gdpdata)
gdpdata <- read.csv("gdp.csv", skip=4)
head(gdpdata)
gdpdata <- read.csv("gdp.csv", skip=5, nrow=190, header=FALSE)
head(gdpdata)
str(gdpdata)
head(edudata)
colnames(gdpdata)[1] <- "CountryCode"
str(colnames)
str(gdpdata)
gdpdata1 <- select(gdpdata, CountryCode, V2,V4,V5)
library(dplyr)
gdpdata1 <- select(gdpdata, CountryCode, V2,V4,V5)
?merge
allData <- merge(gdpdata,edudata,by.x="CountryCode",by.y="CountryCode")
?group_by
head(allData)
as.numeric(allData$V5)
allData$V5
allData1 <- gsub(",","",allData$V5)
allData1
as.numeric(allData1$V5)
?as.numeric
allData$V5 <- gsub(",","",allData$V5)
as.numeric(allData$V5)
allData$V5 <- as.numeric(allData$V5)
str(allData)
groupedData <- group_by(allData, CountryCode)
summaryData <- summarise_each(groupedData,funs(mean))
warnings()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "quiz4a.csv")
data1 <- read.csv("quiz4a.csv")
head(data1)[1:5]
?strsplit
strsplit(names(data1),"wgtp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "quiz4b.csv")
data2 <- read.csv("quiz4b.csv")
head(data2)[1:5]
data2 <- read.csv("quiz4b.csv",skip = 5)
head(data2)[1:5]
data2 <- read.csv("quiz4b.csv",skip = 5, header = FALSE)
head(data2)[1:5]
library(dplyr)
data2a <- filter(data1, V2 != "")
data2a <- filter(data1, V2 != "")
head(data2)[1:5]
data2a <- filter(data1, V2 != "")
data2a <- filter(data2, V2 != "")
head(data2a)[1:5]
data2a <- filter(data2, V2 >= 1 & V2 <= 190)
data2a <- filter(data2, (V2 >= 1 & V2 <= 190))
data2a <- filter(data2, (V2 > 0 & V2 < 191))
data2 <- read.csv("quiz4b.csv",skip = 5, header = FALSE)
as.numeric(data2$V2)
data2$V2 <- as.numeric(data2$V2)
data2a <- filter(data2, (V2 > 0 & V2 < 191))
data2 <- read.csv("quiz4b.csv",skip = 5, header = FALSE, stringsAsFactors = FALSE)
data2$V2 <- as.numeric(data2$V2)
head(data2a)[1:5]
head(data2)[1:5]
tail(data2)[1:5]
data2$V5 <- gsub(",","",data2$V5)
head(data2)[1:5]
data2$V5 <- as.numeric(data2$V5)
head(data2)[1:5]
mean(data2$V5, na.omit)
mean(data2$V5)
?mean
mean(data2$V5, na.rm)
mean(data2$V5, na.rm=TRUE)
?read.csv
data2 <- read.csv("quiz4b.csv",skip = 5, header = FALSE, stringsAsFactors = FALSE,nrows = 190)
head(data2)[1:5]
data2$V5 <- gsub(",","",data2$V5)
data2$V5 <- as.numeric(data2$V5)
mean(data2$V5, na.rm=TRUE)
gdp <- read.csv("quiz4b.csv",skip = 5, header = FALSE, stringsAsFactors = FALSE,nrows = 190)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv","quiz1c.csv")
edu <- read.csv("quiz1c.csv")
head(edu)[a:5]
head(edu)[1:5]
head(gdp)[1:5]
?match
?merge
allQuiz <- merge(gdp, edu, by.x = "V1", by.y = "CountryCode")
str(allQuiz)
?grep
grep("[June]",allQuiz$Special.Notes)
ans<- grep("[June]",allQuiz$Special.Notes)
head(allQuiz)
ans<- grep("['June']",allQuiz$Special.Notes)
ans<- grep("[June]",allQuiz$Special.Notes)
edu <- read.csv("quiz1c.csv", stringsAsFactors = FALSE)
allQuiz <- merge(gdp, edu, by.x = "V1", by.y = "CountryCode")
ans<- grep("[June]",allQuiz$Special.Notes)
ans<- grep("[J][u][n][e]",allQuiz$Special.Notes)
ans<- grep("[Jj][Uu][Nn][Ee]",allQuiz$Special.Notes)
ans<- grep("[Jj][Uu][Nn][Ee]",allQuiz$Special.Notes)
ans<- grep("'[Ff]+[Jj][Uu][Nn][Ee]",allQuiz$Special.Notes)
ans<- grep("[Jj][Uu][Nn][Ee]",allQuiz$Special.Notes)\
ans<- grep("[Jj][Uu][Nn][Ee]",allQuiz$Special.Notes)\
ans<- grep("[Jj][Uu][Nn][Ee]",allQuiz$Special.Notes)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN", auto.assign=FALSE)
sampleTimes = index(amzn)
?par
swirl()
library(swirl)
swirl()
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region ="east")
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25,col="green")
hist(subset(pollution, region=="east"),col="green")
hist(subset(pollution, region=="west"),col="green")
hist(sub(pollution, region=="west")$pm25, col="green")
help()
hist(subset(pollution,region=="west"),col="green")
knknm
klml;
pkkmpo,l;''
kkmpl,''
om,p',;.'
lm';'
west <- subset(pollution, region=="west")
hist(subset(pollution,region=="west")$pm25, col="green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$lattitude, ppm, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(eruptions, waiting)
library(faithful)
kdf
kd
plot(faithful$eruptions, faithful$waiting)
with(faithful, plot(eruptions, waiting) )
title(main="Old Faithful Geyser data")
dev.cur()
pad(file = "myplot.pdf")
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting) )
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting) )
title(main="Old Faithful Geyser data")
dev.copy(png,file="geyserplot.png")
dev.off()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
str(NEI)
as.factor(NEI$year)
str(NEI)
aggregate(NEI$Emissions, by=list(NEI$year), FUN=sum)
total_by_year <- aggregate(NEI$Emissions, by=list(NEI$year), FUN=sum)
barplot(total_by_year$x, col=green, main="Total PM2.5 Emissions for each year",xlab="Year", ylab="Total Emissions")
barplot(total_by_year$x, col="green", main="Total PM2.5 Emissions for each year",xlab="Year", ylab="Total Emissions")
?par()
?barplot
barplot(total_by_year$x, col="green", main="Total PM2.5 Emissions for each year",xlab="Year", ylab="Total Emissions", names.arg=total_by_year$Group.1)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
total_by_year <- aggregate(NEI$Emissions, by=list(NEI$year), FUN=sum)
barplot(total_by_year$x, col="green", main="Total PM2.5 Emissions for each year",
xlab="Year", ylab="Total Emissions", names.arg=total_by_year$Group.1)
dev.copy(png, file="plot1.png")
dev.off()
test1 <- filter(NEI, fips=="")
str(NEI)
test1 <- filter(NEI, fips=="24510")
?filter
library(dplyr)
test1 <- filter(NEI, fips=="24510")
View(test1)
summary(NEI$Pollutant)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
library(dplyr)
baltimore <- filter(NEI, fips=="24510")
total_by_year <- aggregate(baltimore$Emissions, by=list(baltimore$year), FUN=sum)
barplot(total_by_year$x, col="blue", main="Total PM2.5 Emissions for each year in Baltimore",
xlab="Year", ylab="Total Emissions", names.arg=total_by_year$Group.1)
dev.copy(png, file="plot2.png")
dev.off()
View(SCC)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,data=airquality)
xyplot(Ozone~Wind,data=airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month),data=airquality)
xyplot(Ozone~Wind | as.factor(Month),data=airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month,data=airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
vi
v1
v2
myedit("plot1.R")
source(pathtofile("Plot1.R"),local=TRUE)
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
medit("myLabels.R")
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat |color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat |color*cut,data=diamonds,pch=20,xlab=myxlab, ylab=myylab, main=mymain)
str(mpg)
qplot(displ,hwy, data=mpg)
qplot(displ,hwy, data=mpg, color=drv)
qplot(displ,hwy, data=mpg, color=drv, geom=c("point","smooth"))
exit()
exit
install.packages("ggplot2")
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
library(dplyr)
baltimore <- filter(NEI, fips=="24510")
View(baltimore)
qplot(Emissions, year, data=baltimore, color=type)
qplot(year, Emissions, data=baltimore, color=type)
ggplot(baltimore, aes(x = year, y = Estimates)) + geom_bar(aes(fill = colour),
stat = "type")
ggplot(baltimore, aes(x = year, y = Estimates))
ggplot(baltimore, aes(x = year, y = Estimates)) + geom_point()
library(swirl)
swirl()
qplot(hwy, data=mpg, color=drv)
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(displ, hwy, data=mpg,geom=c("point", "smooth"), facets=.~drv,method="loess")
g = ggplot(mpg, displ, hwy)
g = ggplot(mpg, aes(displ, hwy) )
g <- ggplot(mpg, aes(disp,hwy))
g <- ggplot(mpg, aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point() +geom_Smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rues")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2, aes(color=drv))
g+geom_point(aes(color=drv), labs(title="Swirl Rules!"), labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv))+ labs(title="Swirl Rules!")+ labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv))+ labs(title="Swirl Rules!")+ labs(x="Displacement",y="Hwy Mileage")
g+geom_point(size=2,alpha=1/2, aes(color=drv))+geom_smooth(size=4,linetype=3,method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx,myy,type="l", ylim=c(-3,3))
g<- ggplot(testdat, aes(x=myx, y=myy))
g+
geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(x=displ, y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(.drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
library(swirl)
swirl()
swirl()
install_from_swirl("Statistical Inference")
swirl()
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Reproducible Data Project 2")
source('~/.active-rstudio-document', echo=TRUE)
economicData$EVTYPE <- as.factor(economicData$EVTYPE)
healthSummary <- aggregate(economicData$economic, by=list(Category=economicData$EVTYPE), FUN=sum, na.rm=TRUE)
View(healthSummary)
View(healthSummary)
plot(healthSummary$Category, healthSummary$x, type="l")
View(healthSummary)
View(healthSummary)
View(healthData)
View(healthData)
newData <- mutate(selectData, health = FATALITIES + INJURIES)
healthData <- filter(newData, health != 0)
?arrange
healthSummarySorted <- arrange(healthSummary, desc(x))
View(healthSummarySorted)
View(healthSummarySorted)
healthSummarySorted <- arrange(healthSummary, desc(x))
selectedHealthSummary <- healthSummarySorted[1:10,]
View(selectedHealthSummary)
View(selectedHealthSummary)
plot(selectedHealthSummary$Category, selectedHealthSummary$x, type="l")
plot(selectedHealthSummary$Category, selectedHealthSummary$x)
